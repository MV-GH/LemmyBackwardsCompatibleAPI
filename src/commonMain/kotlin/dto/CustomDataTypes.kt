@file:Suppress("unused")

package dto

import MINIMUM_API_VERSION
import kotlinx.serialization.Serializable
import utils.compareVersions
import utils.isBetweenVersions

/**
 * Contains the datatypes that can't be autogenerated, bc Dukat doesn't support unions.
 * Thus, we have to manually create them and keep them up to date.
 * This is split in two groups, the first group is assumed to never change,
 * and the second group is assumed to change between versions. Therefore, the second group
 * implements a contract. Always use the getSupportedEntries<Enum> function to get the supported entries
 * for that version.
 *
 */

// GROUP 1

@Serializable
enum class ListingType {
    All,
    Local,
    Subscribed,
}

@Serializable
enum class SubscribedType {
    Subscribed,
    NotSubscribed,
    Pending,
}

@Serializable
enum class PostFeatureType {
    Local,
    Community,
}

// GROUP 2

@Serializable
enum class RegistrationMode(
    override val minimumVersion: String = MINIMUM_API_VERSION,
    override val maximumVersion: String? = null,
) : VersionTracker {
    Closed, RequireApplication, Open
}

@Serializable
enum class SearchType(
    override val minimumVersion: String = MINIMUM_API_VERSION,
    override val maximumVersion: String? = null,
) : VersionTracker {
    All, Comments, Posts, Communities, Users, Url
}

@Serializable
enum class ModlogActionType(
    override val minimumVersion: String = MINIMUM_API_VERSION,
    override val maximumVersion: String? = null,
) : VersionTracker {

    All, ModRemovePost, ModLockPost, ModFeaturePost, ModRemoveComment, ModRemoveCommunity, ModBanFromCommunity, ModAddCommunity, ModTransferCommunity, ModAdd, ModBan, ModHideCommunity, AdminPurgePerson, AdminPurgeCommunity, AdminPurgePost, AdminPurgeComment
}

@Serializable
enum class SortType(
    override val minimumVersion: String = MINIMUM_API_VERSION,
    override val maximumVersion: String? = null,
) : VersionTracker {
    Active, Hot, New, Old, Controversial, TopDay, TopWeek, TopMonth, TopYear, TopAll, MostComments, NewComments, TopHour("0.18.0"), TopSixHour("0.18.0"),
    TopTwelveHour("0.18.0"), TopThreeMonths("0.18.1"),
    TopSixMonths("0.18.1"), TopNineMonths("0.18.1")
}

@Serializable
enum class CommentSortType(
    override val minimumVersion: String = MINIMUM_API_VERSION,
    override val maximumVersion: String? = null,
) : VersionTracker {
    Hot, Top, New, Old, Controversial("0.19")
}

/**
 * Tracks the version of the supported entries from this enum
 * Use this in conjunction with [getSupportedEntries]
 *
 * @property minimumVersion The version this entry was added
 * @property maximumVersion The version this entry was removed, if null, it is still supported
 */
@Serializable
sealed interface VersionTracker {
    val minimumVersion: String
    val maximumVersion: String?
}

/**
 * Returns the supported entries for the given version.
 * It is possible that this list is empty, such case means this type is not used at all in a newer version
 * Or doesn't exist in the older version.
 *
 * @param instanceVersion The version of the instance
 * @return A list of supported entries
 */
inline fun <reified T> getSupportedEntries(instanceVersion: String): List<T> where T : Enum<T>, T : VersionTracker {
    return enumValues<T>().filter {
        val max = it.maximumVersion
        if (max == null) {
            compareVersions(instanceVersion, it.minimumVersion) >= 0
        } else {
            isBetweenVersions(instanceVersion, it.minimumVersion, max)
        }
    }
}

fun main() {
    val siteVersion = "0.18.0"

    val supportedEntries = getSupportedEntries<RegistrationMode>(siteVersion)
    println(supportedEntries)
}

// TODO check order of enums
